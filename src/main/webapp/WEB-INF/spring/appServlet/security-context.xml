<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
	
	<http auto-config='true' use-expressions="true">
	<!-- 
		* hasRole('ROLE') : ROLE 권한을 가지고 있는 경우 
		* hasAnyRole('ROLE1', 'ROLE2') : ROLE1, ROLE2 권한 중 하나라도 가지고 있는 경우 
		* permitAll : 모두 접근 가능 
		* denyAll : 모두 접근 불가능 
		* isAnonymouse() : Anonymous 사용자일 경우 
		* isRemeberMe() : Remember-me 기능으로 로그인한 사용자일 경우 
		* isAuthenticated() : Anonymous 사용자가 아닌 경우 
		* isFullyAuthenticated() : Anonymous 사용자가 아니고 Remeber-me 기능으로 로그인하지 않은 경우
	 -->
		<intercept-url pattern="/resources/**" access="permitAll"/> 
		<intercept-url pattern="/usrSrc/**" access="permitAll"/> 
		<intercept-url pattern="/admSrc/**" access="permitAll"/> 
		<intercept-url pattern="/common/**" access="permitAll"/> 
		<intercept-url pattern="/main/**" access="permitAll" /> 
		<intercept-url pattern="/login/login.do" access="isAnonymous()" /> 
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" /> 
		<!-- <intercept-url pattern="/member/**" access="hasRole('ROLE_MEMBER')" /> 
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/> -->
		
		<!-- 로그인설정
			* username-parameter : 입력한 ID에 대한 파라미터 네임
			* password-parameter : 입력한 PW에 대한 파라미터 네임
			* login-processing-url : View 페이지의 <form action="/url"> 에서 지정한 URL
			* login-page : 서블릿에 넘겨줄 로그인 페이지 URL
			* default-target-url : 로그인에 성공하면 보내줄 페이지
			* authentication-success-handler-ref : 로그인 성공시 보내줄 핸들러
			* authentication-failure-url : 로그인에 실패하면 보내줄 페이지
			* authentication-failure-handler-ref : 로그인에 실패하면 보내줄 핸들러
		-->
		<form-login 
			login-page="/login/login.do" 
			login-processing-url="/login/loginChk.do" 
			username-parameter="username" 
			password-parameter="password"
    		authentication-success-handler-ref="loginSuccessHandler"
    		authentication-failure-handler-ref="LoginFailureHandler" /> 
    	
		<!-- 로그아웃 설정 
			* logout-url : 로그아웃 요청에 대한 URL (버튼 눌렀을 때 발생하는 요청 URL)
			* logout logout-success-url : 로그아웃 완료되면 보내줄 URL
			* invalidate-session : 세션 삭제 여부
			* delete-cookies : 쿠키 삭제 여부
		-->
		<logout 
			logout-url="/login/logout.do"
			invalidate-session="true"
			logout-success-url="/"
			delete-cookies="JESSION_ID" />
			
		<!-- true 시 비활성화. 기본값은 false -->
		<csrf disabled="false" />
		
		<!-- 세션수를 설정하여 중복로그인 방지. 중복시  expired-url로 이동-->
		<!-- <session-management> 
			<concurrency-control max-sessions="1" expired-url="/login/login.do" /> 
		</session-management> -->
		
		<!-- 403에러 페이지 -->
		<access-denied-handler error-page="/login/accessDenied.do" />
	</http>
	
	<!-- loginSuccessHandler 빈 생성 -->	
   	<beans:bean id="loginSuccessHandler" class="com.pineit.JSArchive.handler.LoginSuccessHandler">
	    <beans:property name="loginidname" value="username"/>
	    <beans:property name="defaultUrl" value="/"/>
	</beans:bean>
	<!-- loginFailureHandler 빈 생성 -->	
   	<beans:bean id="LoginFailureHandler" class="com.pineit.JSArchive.handler.LoginFailureHandler">
	    <beans:property name="loginidname" value="username"/>
	    <beans:property name="loginpwdname" value="password"/>
	    <beans:property name="defaultFailureUrl" value="/login/login.do?error"/>
	</beans:bean>
	
	<!-- bcryptPasswordEncoder -->
   <beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<authentication-manager>
		<authentication-provider ref="UserLoginAuthenticationProvider">
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="LoginService" class="com.pineit.JSArchive.service.impl.LoginServiceImpl"/>
	<beans:bean id="UserLoginAuthenticationProvider" class="com.pineit.JSArchive.handler.UserLoginAuthenticationProvider"/>

</beans:beans>